Test Project: Spam Sender Reputation System

Overview: Assume you are trying to improve incoming spam classification for ProtonMail. You come across the idea of building a reputation system similar to the one described in the "Sender Reputation in a Large Webmail Service" paper. First, summarize the paper so that your colleagues who are too busy to read the paper can understand the important points from the paper. Secondly, propose how you would implement the new reputation system to improve spam classification. Finally, implement the reputation update part of the system. Details below...

Part 1 (Communicate): Summarize the paper in 1-2 pages. Assume the reader never heard of the paper and is not an expert with spam. You will be judged on how many of the important points you explain as well as how clearly you explain them. 

Part 2 (Design): Propose an implementation of the reputation system and how it can be used to help classify incoming spam. You can assume SpamAssassin is working like the automatic spam filter mentioned in the paper and a SpamScore >= 5 is likely spam while SpamScore < 5 is more likely not spam. Assume you are using PHP as the backend codebase and MySQL for data storage. You can assume we already have the User table (each row is a user, indexed by UserID) and the Message table (each row is an email indexed by MessageID with one UserID, a unix Time of when the email arrived, a SpamScore from SpamAssassin, the Headers and Body). You are free to add any additional tables or add any columns to existing tables.   

Part 3 (Code): Build the part of the system that deals with updating sender reputation as emails from various senders come in and users give feedback. For simplicity, only build it to track sender IP reputations. You can simulate incoming email getting added to the Message table with various SpamScore's. You can also simulate Users marking some of their Messages as spam or not spam. Use object oriented programming if possible. It is OK if your code does not work as a fully functional system or even run; do your best at demonstrating your coding skills.



Assume we have these existing tables:
CREATE TABLE `User` (
  `UserID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`UserID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `Message` (
  `MessageID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `UserID` int(10) unsigned NOT NULL,
  `Time` int(10) unsigned NOT NULL,
  `SpamScore` tinyint(3) unsigned DEFAULT NULL,
  `Header` text COLLATE utf8mb4_unicode_ci,
  `Body` text COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`MessageID`),
  KEY `UserID` (`UserID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


Example incoming email header:
In the header below, we can see it was sent from IP 54.240.15.197, passed SPF with bounces.amazon.com as the Return-Path domain, passed DKIM with amazon.com domain, and has a very non-spammy score of -7.6 from SpamAssassin.

Return-Path: <2017062818244549a62a320d354447818b28158020p0na-C19WUOQGH538F3@bounces.amazon.com>
X-Original-To: dcl@protonmail.com
Received: from a15-197.smtp-out.amazonses.com (a15-197.smtp-out.amazonses.com
 [54.240.15.197]) (using TLSv1 with cipher ECDHE-RSA-AES128-SHA (128/128 bits)) (No
 client certificate requested) by mail5i.protonmail.ch (Postfix) with ESMTPS id 834E81611
 for <dcl@protonmail.com>; Wed, 28 Jun 2017 14:24:48 -0400 (EDT)
Authentication-Results: mail5i.protonmail.ch; dmarc=pass (p=quarantine dis=none)
 header.from=amazon.com
Authentication-Results: mail5i.protonmail.ch; spf=pass
 smtp.mailfrom=2017062818244549a62a320d354447818b28158020p0na-C19WUOQGH538F3@bounces.amazon.com
Authentication-Results: mail5i.protonmail.ch; dkim=pass (1024-bit key)
 header.d=amazon.com header.i=@amazon.com header.b="eVI5Ulpc"; dkim=pass (1024-bit key)
 header.d=amazonses.com header.i=@amazonses.com header.b="AAODPVgR"
Dkim-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/simple;
 s=taugkdi5ljtmsua4uibbmo5mda3r2q3v; d=amazon.com; t=1498674286;
 h=Date:From:To:Message-ID:Subject:MIME-Version:Content-Type;
 bh=3GnViQUd73cZhAoSSdugJgXQZojDPthyXDyQqTUCMOU=;
 b=eVI5UlpcntK2RhULkojt5fODJtqc0HWpzvLvK91DLyfuOyHDNprbM1jbGETlt7ED
 GIruPF5THtAtvMJ68csCgUcB26Sh6A0KKR/csvQhW1YjJhhRyrwJuG8YlDF9o+EAwGV
 WheEHd0VnYPnWNUK4XMDp9/LqsCGqKADIuheh4bE=
Dkim-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/simple;
 s=224i4yxa5dv7c2xz3womw6peuasteono; d=amazonses.com; t=1498674286;
 h=Date:From:To:Message-ID:Subject:MIME-Version:Content-Type:Feedback-ID;
 bh=3GnViQUd73cZhAoSSdugJgXQZojDPthyXDyQqTUCMOU=;
 b=AAODPVgRFuoTdHoTOUsFixIw4f/+73NUYvfrj86XXQzb1CeB899ZNvuXG9wCTJNM
 nSNlSUvkgSiUFQERDCG8RjOOiC3YbpVl803AIyLbOM5BnoumfNhEnEjuIcylKfCwH7/
 euYSeJ0hopgouuC8G56vYMKsh2QpQl6rkYSRHeCg=
Date: Wed, 28 Jun 2017 18:24:45 +0000
From: "Amazon.com" <store-news@amazon.com>
To: "dcl@protonmail.com" <dcl@protonmail.com>
Message-Id: <0100015ceff2cc13-c842b0b2-084f-4aba-988d-8b5452261d69-000000@email.amazonses.com>
Subject: Last chance to save on $5 magazines
Mime-Version: 1.0
Content-Type: text/html
X-Amazon-Rte-Version: 2.0
X-Amazon-Metadata: CA=C19WUOQGH538F3-CU=A116WV4PRGDUG2-RI=A3NH5XN3W1IV5P
Bounces-To: 2017062818244549a62a320d354447818b28158020p0na-C19WUOQGH538F3@bounces.amazon.com
X-Amazon-Mail-Relay-Type: merchandizing
X-Original-Messageid: <urn.correios.msg.2017062818244549a62a320d354447818b28158020p0na@1498674285517.mms-na-m4e-f1e553e2.us-east-1.amazon.com>
X-Ses-Outgoing: 2017.06.28-54.240.15.197
Feedback-Id: 1.us-east-1.+gzE1S+MWTFXXYmwxo7wkk651GMxMPAUFYiyN/09X40=:AmazonSES
X-Spam-Status: No, score=-7.6 required=4.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,HTML_MESSAGE,RCVD_IN_DNSWL_NONE,SPF_PASS,USER_IN_DEF_SPF_WL autolearn=ham
 autolearn_force=no version=3.4.1



Random example PHP code that queries MySQL (you should try to use PDO if possible):
class SpamOut extends ModelUserBase
{
    const ID = 'SpamOutID';
    const TABLE = 'SpamOut';

	public static function Create(array $data, $user_id)
	{
	    // JSON encode metadata
	    $data['Metadata'] = Util::JSONEncode($data['Metadata']);

	    if (!isset($data['Content'])) {
	        throw new \Exception('Missing Content field');
	    }

	    $query = 'INSERT INTO ' . self::TABLE . '(' . self::ID . ', UserID, TaskID, MessageID, SentMessageID, State, 
	        Type, Version, CreateTime, Size, Attachment, Metadata, Content)
	        VALUES(default, :UserID, :TaskID, :MessageID, :SentMessageID, :State, :Type, :Version, 
	            :CreateTime, :Size, :Attachment, :Metadata, :Content)';

	    $db = DB::get_connection($user_id, array(self::TABLE), DB::ACTION_WRITE)->dbh;
	    $stmt = $db->prepare($query);

	    try {
	        if(!($stmt->execute($data) && $stmt->rowCount())) {
	            throw DatabaseError::Query('Could not insert into SpamOut');
	        }
	        return new SpamOut($db->lastInsertId(), $user_id);
	    }
	    catch(\Exception $e) {
	        throw $e;
	    }
	    return 0;
	}

	// get for a user
    public static function GetMessages($user_id, $task_id=null, $state=null)
    {
        $db = DB::get_connection($user_id, array(self::TABLE), DB::ACTION_READ)->dbh;

        $query = 'SELECT * FROM ' . self::TABLE . ' WHERE UserID = :UserID';

        $data = array(
            'UserID' => $user_id
            );
        if (isset($task_id)) {
            $query .= ' AND TaskID = :TaskID';
            $data['TaskID'] = $task_id;
        }
        if (isset($state)) {
            $query .= ' AND State = :State';
            $data['State'] = $state;
        }

        $stmt = $db->prepare($query);

        $stmt->execute($data);

        $all = $stmt->fetchAll(PDO::FETCH_ASSOC);
        $objects = array();
        foreach($all as $row) {
            $objects[] = new SpamOut($row[self::ID], $user_id, $row, true);
        }

        return $objects;
    }
}
